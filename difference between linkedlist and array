Feature         	        Array	          LinkedList
Size	                    Fixed         	Dynamic
Memory allocation	        Contiguous	    Non-contiguous
Access by index	          Fast (O(1))	    Slow (O(n))
Insertion/Deletion        Slow (O(n))	    Fast (O(1) with reference)
Memory usage	            Less	          More (due to pointers)
Type	                    Data structure	Data structure (nodes)




***************************************************************************
‚úÖ Your Point:
"In arrays, a certain memory is allocated even if we don‚Äôt use it. But in LinkedList, we can keep increasing them, so isn‚Äôt LinkedList better memory-wise?"

üü° Yes, but with caveats:
‚úÖ LinkedList: Memory Efficient in Terms of Size
LinkedList grows dynamically‚Äîyou only use memory for the number of elements you actually store.

No need to define the size in advance.

Good if you don‚Äôt know how many elements you‚Äôll need.

‚ùå BUT: Each Node in LinkedList Uses Extra Memory
Every element (node) stores two things:

The data

A pointer/reference to the next node (and possibly previous node in doubly linked list)

So for each node, extra memory is used for the reference(s).
If you're storing a large number of small items (e.g., integers), this extra pointer can actually waste a lot of memory.

üî¥ Array: Preallocated but Compact
Arrays store only the data, no extra references.

More memory-efficient per element.

However, if you over-allocate and don‚Äôt fill all the space, then some memory is wasted.

